#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Copyright 2016 <+YOU OR YOUR COMPANY+>.
# 
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

import numpy
from gnuradio import gr

class diezmaoppenhein_cc(gr.sync_block):
    """
    Realiza un diezmado, pero al estido Oppenhein, donde las muestras a eliminar en realidad se les asignan el valor cero. Hemos realizado este bloque como el fin de poder visualizar el efecto del diezmado, para comparar la senal antes y despues del diezmador. Algo que no permite el diezmador_cc. La idea es usar el presente bloque, para realizar experimentos. Cuando estos sean exitosos entonces ya poder usar a ciegas el diezmador_cc.
EJEMPLO: Entrada = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
	 paso = 3
	 Salida = Entrada[0::paso] = [ 1,0,0, 4,0,0, 7,0,0,10] 
    """
    def __init__(self, paso):
        gr.sync_block.__init__(self,
            name="diezmaoppenhein",
            in_sig=[numpy.complex64],
            out_sig=[numpy.complex64])
        self.paso=paso


    def work(self, input_items, output_items):
        in0 = input_items[0]
        out = output_items[0]
        # <+signal processing here+>
        s=numpy.zeros(len(in0))
        for i in range(0,len(in0),self.paso):
            s[i]=in0[i]

        out[:]=s
        return len(output_items[0])

