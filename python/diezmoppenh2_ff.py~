#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Copyright 2016 <+YOU OR YOUR COMPANY+>.
# 
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

import numpy
from gnuradio import gr

class diezmoppenh2_ff(gr.sync_block):
    """
    Realiza un diezmado al estilo del que se muestra en el libro Signal Processing an systems de Oppenheim. Consiste
    en convertir a cero las amplitudes de las muestras a diezmar. 
    paso: es la separaci√≥n entre las muestras cuya amplitud se conserva
    Minicio: es un retardo o corrimiento que puede ser programado para que no arranque todo necesariamente en cero.
    Hecho por Homero Ortega Boada. Universidad
    Industrial de Santander.
    """
    def __init__(self, paso, Minicio):
        gr.sync_block.__init__(self,
            name="diezmoppenh2_ff",
            in_sig=[numpy.float32],
            out_sig=[numpy.float32])

        self.paso=paso
        self.Minicio=Minicio
        self.count=paso-(Minicio+1)

    def work(self, input_items, output_items):
        in0 = input_items[0]
        out = output_items[0]
        s=numpy.zeros(len(in0))
        print ("s():  ", s)
        # <+signal processing here+>
        for i in range(0,len(in0)):
            print ("i :  ", i)

            if self.count == (self.paso-1):
                print("count ",self.count)
                print("i ",i)
                print("in0[i] ",in0[i])
                self.count=0
                s[i]=in0[i]
                print("s[i] ", s[i])

            else:        
                self.count += 1
#                s[i]=0.0
        out[:]=s

# Funcion de Callback
#    def set_ka(self, Minicio):
#        self.Minicio=Minicio
