#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Copyright 2016 <+YOU OR YOUR COMPANY+>.
# 
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

import numpy
from gnuradio import gr

class diezmoppenhein1_ff(gr.sync_block):
    """
    Realiza un diezmado al estilo del libro de Oppenheim. Consiste en poner ceros a las muestras que se diezman
paso es el n√∫mero de muestras a diezmar. MuestraInicio es el retardo para diezmar.
    """
    def __init__(self, paso, MuestraInicio):
        gr.sync_block.__init__(self,
            name="diezmoppenhein1_ff",
            in_sig=[numpy.float32],
            out_sig=[numpy.float32])
        self.paso=paso
        self.MuestraInicio=MuestraInicio
        self.MNuevoInicio=MuestraInicio
        self.MNocubiertas=0

    def work(self, input_items, output_items):
        in0 = input_items[0]
        out = output_items[0]
        # <+signal processing here+>
        L=len(in0)
        s=numpy.zeros(L)

        if self.MNuevoInicio==0:     
            PasosDados=0
        else:
            PasosDados=1

        for i in range(self.MNuevoInicio,L,self.paso):
            s[i]=in0[i]
            PasosDados+=1
        Mcubiertas=(PasosDados-1)*self.paso-self.MNocubiertas

        # cuando no se cubrieron todas las muestras del paquete
        # hay que determinar cuantas muestras quedan por cubrir
        if Mcubiertas<L:
            self.MNocubiertas=L-Mcubiertas
            self.MNuevoInicio=self.paso-(self.MNocubiertas)
        # cuando justo se cubren todas las muestras del paquete
        else:
            self.MNuevoInicio=0
            self.MNocubiertas=0

        print("L: ", L)
        print("paso: ", self.paso)
        print("Mcubiertas: ", self.Mcubiertas)
        print("MNocubiertas: ", self.MNocubiertas)
        print("MNuevoInicio: ", self.MNuevoInicio)
        out[:]=s

        return len(output_items[0])

    def set_ka(self, MuestraInicio):
        self.MuestraInicio=MuestraInicio


