#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Copyright 2016 <+YOU OR YOUR COMPANY+>.
# 
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

from PyQt4 import Qt
from gnuradio import analog
from gnuradio import blocks
from gnuradio import eng_notation
from gnuradio import filter
from gnuradio import gr
from gnuradio.eng_option import eng_option
from gnuradio.filter import firdes
from optparse import OptionParser
import cmath
import math
import numpy
import sys

class usrp2usrp_cc(gr.hier_block2):
    """
    Este bloque es para imitar la conexion entre dos USRPs.
samp_rate: frecuencia de muestreo
B: ancho de banda en Herzt
Phoffset: offset de fase en radianes
Toffset: offset de tiempo en numero de muestras
Foffset: offset de frecuencia en Herzt
No: PSD del ruido en Watt/Herzt
Katt: coeficientte de atenuacion

Hecho por Nelson Trillos y Homero Ortega
Universidad Industrial de Santander
    """
    def __init__(self, samp_rate,B,Phoffset,Toffset,Foffset,No,Katt):
        gr.hier_block2.__init__(self,
            "usrp2usrp_cc",
            gr.io_signature(1, 1, gr.sizeof_complex64),  # Input signature
            gr.io_signature(1, 1, gr.sizeof_complex64)) # Output signature

        ##################################################
        # Variables
        ##################################################
        self.samp_rate = samp_rate 
        self.No = No 
        self.Vruido = Vruido = math.sqrt(No*samp_rate)
        self.Toffset = Toffset 
        self.Phoffset = Phoffset 
        self.Katt = Katt 
        self.Foffset = Foffset 
        self.B = B

        ##################################################
        # Blocks
        ##################################################
        self.low_pass_filter_0 = filter.fir_filter_ccf(1, firdes.low_pass(
        	0.8, samp_rate, B, B/4., firdes.WIN_HAMMING, 6.76))
       # self.blocks_null_source_0 = blocks.null_source(gr.sizeof_gr_complex*1)
       # self.blocks_null_sink_0 = blocks.null_sink(gr.sizeof_gr_complex*1)
        self.blocks_multiply_xx_0_0 = blocks.multiply_vcc(1)
        self.blocks_multiply_xx_0 = blocks.multiply_vcc(1)
        self.blocks_multiply_const_vxx_0 = blocks.multiply_const_vcc((1/Katt, ))
        self.blocks_delay_0 = blocks.delay(gr.sizeof_gr_complex*1, Toffset)
        self.blocks_add_xx_0 = blocks.add_vcc(1)
        self.analog_sig_source_x_0 = analog.sig_source_c(samp_rate, analog.GR_COS_WAVE, Foffset, 1, 0)
        self.analog_noise_source_x_0 = analog.noise_source_c(analog.GR_GAUSSIAN, Vruido, 42)
        self.analog_const_source_x_1_0 = analog.sig_source_c(0, analog.GR_CONST_WAVE, 0, 0, cmath.exp(1j * Phoffset))

        ##################################################
        # Connections
        ##################################################
        self.connect((self.analog_const_source_x_1_0, 0), (self.blocks_multiply_xx_0, 1))    
        self.connect((self.analog_noise_source_x_0, 0), (self.blocks_add_xx_0, 0))    
        self.connect((self.analog_sig_source_x_0, 0), (self.blocks_multiply_xx_0_0, 0))    
        self.connect((self.blocks_add_xx_0, 0), self)    
        self.connect((self.blocks_delay_0, 0), (self.blocks_multiply_const_vxx_0, 0))    
        self.connect((self.blocks_multiply_const_vxx_0, 0), (self.blocks_multiply_xx_0, 0))    
        self.connect((self.blocks_multiply_xx_0, 0), (self.blocks_multiply_xx_0_0, 1))    
        self.connect((self.blocks_multiply_xx_0_0, 0), (self.blocks_add_xx_0, 1))    
        self.connect(self, (self.low_pass_filter_0, 0))    
        self.connect((self.low_pass_filter_0, 0), (self.blocks_delay_0, 0))    

    def closeEvent(self, event):
        self.settings = Qt.QSettings("GNU Radio", "OOK_Decisor_v3")
        self.settings.setValue("geometry", self.saveGeometry())
        event.accept()


    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate
        self.set_B(self.samp_rate/2)
        self.set_Vruido(math.sqrt(self.No*self.samp_rate))
        self.analog_sig_source_x_0.set_sampling_freq(self.samp_rate)
        self.low_pass_filter_0.set_taps(firdes.low_pass(0.8, self.samp_rate, self.B, self.B/4., firdes.WIN_HAMMING, 6.76))

    def get_No(self):
        return self.No

    def set_No(self, No):
        self.No = No
        self.set_Vruido(math.sqrt(self.No*self.samp_rate))

    def get_Vruido(self):
        return self.Vruido

    def set_Vruido(self, Vruido):
        self.Vruido = Vruido
        self.analog_noise_source_x_0.set_amplitude(self.Vruido)

    def get_Toffset(self):
        return self.Toffset

    def set_Toffset(self, Toffset):
        self.Toffset = Toffset
        self.blocks_delay_0.set_dly(self.Toffset)

    def get_Phoffset(self):
        return self.Phoffset

    def set_Phoffset(self, Phoffset):
        self.Phoffset = Phoffset
        self.analog_const_source_x_1_0.set_offset(cmath.exp(1j * self.Phoffset))

    def get_Katt(self):
        return self.Katt

    def set_Katt(self, Katt):
        self.Katt = Katt
        self.blocks_multiply_const_vxx_0.set_k((1/self.Katt, ))

    def get_Foffset(self):
        return self.Foffset

    def set_Foffset(self, Foffset):
        self.Foffset = Foffset
        self.analog_sig_source_x_0.set_frequency(self.Foffset)

    def get_B(self):
        return self.B

    def set_B(self, B):
        self.B = B
        self.low_pass_filter_0.set_taps(firdes.low_pass(0.8, self.samp_rate, self.B, self.B/4., firdes.WIN_HAMMING, 6.76))



            # Define blocks and connect them
#            self.connect()




